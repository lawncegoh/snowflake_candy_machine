{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhantomWalletAdapter = void 0;\n\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass PhantomWalletAdapter extends wallet_adapter_base_1.BaseMessageSignerWalletAdapter {\n  constructor(config = {}) {\n    super();\n\n    this._disconnected = () => {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new wallet_adapter_base_1.WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) (0, wallet_adapter_base_1.pollUntilReady)(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isPhantom);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected);\n  }\n\n  get autoApprove() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.autoApprove);\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && window.solana;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotFoundError();\n        if (!wallet.isPhantom) throw new wallet_adapter_base_1.WalletNotInstalledError();\n\n        if (!wallet.isConnected) {\n          // HACK: Phantom doesn't reject or emit an event if the popup is closed\n          const handleDisconnect = wallet._handleDisconnect;\n\n          try {\n            yield new Promise((resolve, reject) => {\n              const connect = () => {\n                wallet.off('connect', connect);\n                resolve();\n              };\n\n              wallet._handleDisconnect = (...args) => {\n                wallet.off('connect', connect);\n                reject(new wallet_adapter_base_1.WalletWindowClosedError());\n                return handleDisconnect.apply(wallet, args);\n              };\n\n              wallet.on('connect', connect);\n              wallet.connect().catch(reason => {\n                wallet.off('connect', connect);\n                reject(reason);\n              });\n            });\n          } catch (error) {\n            if (error instanceof wallet_adapter_base_1.WalletError) throw error;\n            throw new wallet_adapter_base_1.WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          } finally {\n            wallet._handleDisconnect = handleDisconnect;\n          }\n        }\n\n        if (!wallet.publicKey) throw new wallet_adapter_base_1.WalletConnectionError();\n        let publicKey;\n\n        try {\n          publicKey = new web3_js_1.PublicKey(wallet.publicKey.toBytes());\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        wallet.on('disconnect', this._disconnected);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          yield wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new wallet_adapter_base_1.WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n\n        this.emit('disconnect');\n      }\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          return yield wallet.signTransaction(transaction);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          return yield wallet.signAllTransactions(transactions);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          const {\n            signature\n          } = yield wallet.signMessage(message);\n          return Uint8Array.from(signature);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}\n\nexports.PhantomWalletAdapter = PhantomWalletAdapter;","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PhantomWalletAdapter = void 0;\r\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nclass PhantomWalletAdapter extends wallet_adapter_base_1.BaseMessageSignerWalletAdapter {\r\n    constructor(config = {}) {\r\n        super();\r\n        this._disconnected = () => {\r\n            const wallet = this._wallet;\r\n            if (wallet) {\r\n                wallet.off('disconnect', this._disconnected);\r\n                this._wallet = null;\r\n                this._publicKey = null;\r\n                this.emit('error', new wallet_adapter_base_1.WalletDisconnectedError());\r\n                this.emit('disconnect');\r\n            }\r\n        };\r\n        this._connecting = false;\r\n        this._wallet = null;\r\n        this._publicKey = null;\r\n        if (!this.ready)\r\n            (0, wallet_adapter_base_1.pollUntilReady)(this, config.pollInterval || 1000, config.pollCount || 3);\r\n    }\r\n    get publicKey() {\r\n        return this._publicKey;\r\n    }\r\n    get ready() {\r\n        var _a;\r\n        return typeof window !== 'undefined' && !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isPhantom);\r\n    }\r\n    get connecting() {\r\n        return this._connecting;\r\n    }\r\n    get connected() {\r\n        var _a;\r\n        return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected);\r\n    }\r\n    get autoApprove() {\r\n        var _a;\r\n        return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.autoApprove);\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.connected || this.connecting)\r\n                    return;\r\n                this._connecting = true;\r\n                const wallet = typeof window !== 'undefined' && window.solana;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotFoundError();\r\n                if (!wallet.isPhantom)\r\n                    throw new wallet_adapter_base_1.WalletNotInstalledError();\r\n                if (!wallet.isConnected) {\r\n                    // HACK: Phantom doesn't reject or emit an event if the popup is closed\r\n                    const handleDisconnect = wallet._handleDisconnect;\r\n                    try {\r\n                        yield new Promise((resolve, reject) => {\r\n                            const connect = () => {\r\n                                wallet.off('connect', connect);\r\n                                resolve();\r\n                            };\r\n                            wallet._handleDisconnect = (...args) => {\r\n                                wallet.off('connect', connect);\r\n                                reject(new wallet_adapter_base_1.WalletWindowClosedError());\r\n                                return handleDisconnect.apply(wallet, args);\r\n                            };\r\n                            wallet.on('connect', connect);\r\n                            wallet.connect().catch((reason) => {\r\n                                wallet.off('connect', connect);\r\n                                reject(reason);\r\n                            });\r\n                        });\r\n                    }\r\n                    catch (error) {\r\n                        if (error instanceof wallet_adapter_base_1.WalletError)\r\n                            throw error;\r\n                        throw new wallet_adapter_base_1.WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                    }\r\n                    finally {\r\n                        wallet._handleDisconnect = handleDisconnect;\r\n                    }\r\n                }\r\n                if (!wallet.publicKey)\r\n                    throw new wallet_adapter_base_1.WalletConnectionError();\r\n                let publicKey;\r\n                try {\r\n                    publicKey = new web3_js_1.PublicKey(wallet.publicKey.toBytes());\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                wallet.on('disconnect', this._disconnected);\r\n                this._wallet = wallet;\r\n                this._publicKey = publicKey;\r\n                this.emit('connect');\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n            finally {\r\n                this._connecting = false;\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const wallet = this._wallet;\r\n            if (wallet) {\r\n                wallet.off('disconnect', this._disconnected);\r\n                this._wallet = null;\r\n                this._publicKey = null;\r\n                try {\r\n                    yield wallet.disconnect();\r\n                }\r\n                catch (error) {\r\n                    this.emit('error', new wallet_adapter_base_1.WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\r\n                }\r\n                this.emit('disconnect');\r\n            }\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    return yield wallet.signTransaction(transaction);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signAllTransactions(transactions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    return yield wallet.signAllTransactions(transactions);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signMessage(message) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    const { signature } = yield wallet.signMessage(message);\r\n                    return Uint8Array.from(signature);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.PhantomWalletAdapter = PhantomWalletAdapter;\r\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"script"}