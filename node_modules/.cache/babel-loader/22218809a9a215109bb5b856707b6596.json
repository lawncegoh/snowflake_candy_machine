{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false,\n  autoApprove: false\n};\nexport const WalletProvider = ({\n  children,\n  wallets,\n  autoConnect = false,\n  onError = error => console.error(error),\n  localStorageKey = 'walletName'\n}) => {\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [{\n    wallet,\n    adapter,\n    ready,\n    publicKey,\n    connected,\n    autoApprove\n  }, setState] = useState(initialState);\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false); // Map of wallet names to wallets\n\n  const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n    walletsByName[wallet.name] = wallet;\n    return walletsByName;\n  }, {}), [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(() => {\n    const wallet = name && walletsByName[name] || null;\n    const adapter = wallet && wallet.adapter();\n\n    if (adapter) {\n      const {\n        ready,\n        publicKey,\n        connected,\n        autoApprove\n      } = adapter;\n      setState({\n        wallet,\n        adapter,\n        connected,\n        publicKey,\n        ready,\n        autoApprove\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (autoConnect && adapter && ready && !connecting && !connected) {\n      (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n          setConnecting(true);\n\n          try {\n            yield adapter.connect();\n          } catch (error) {\n            // Clear the selected wallet\n            setName(null); // Don't throw error, but onError will still be called\n          } finally {\n            setConnecting(false);\n          }\n        });\n      })();\n    }\n  }, [autoConnect, adapter, ready, connecting, connected, setConnecting, setName]); // Select a wallet by name\n\n  const select = useCallback(newName => __awaiter(void 0, void 0, void 0, function* () {\n    if (name === newName) return;\n    if (adapter) yield adapter.disconnect();\n    setName(newName);\n  }), [name, adapter, setName]); // Handle the adapter's ready event\n\n  const onReady = useCallback(() => setState(state => Object.assign(Object.assign({}, state), {\n    ready: true\n  })), [setState]); // Handle the adapter's connect event\n\n  const onConnect = useCallback(() => {\n    if (!adapter) return;\n    const {\n      connected,\n      publicKey,\n      ready,\n      autoApprove\n    } = adapter;\n    setState(state => Object.assign(Object.assign({}, state), {\n      connected,\n      publicKey,\n      ready,\n      autoApprove\n    }));\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  const onDisconnect = useCallback(() => setName(null), [setName]); // Connect the adapter to the wallet\n\n  const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (connecting || disconnecting || connected) return;\n\n    if (!wallet || !adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!ready) {\n      setName(null);\n\n      if (typeof window !== 'undefined') {\n        window.open(wallet.url, '_blank');\n      }\n\n      const error = new WalletNotReadyError();\n      onError(error);\n      throw error;\n    }\n\n    setConnecting(true);\n\n    try {\n      yield adapter.connect();\n    } catch (error) {\n      setName(null);\n      throw error;\n    } finally {\n      setConnecting(false);\n    }\n  }), [connecting, disconnecting, connected, wallet, adapter, onError, ready, setName, setConnecting]); // Disconnect the adapter from the wallet\n\n  const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (disconnecting) return;\n    if (!adapter) return setName(null);\n    setDisconnecting(true);\n\n    try {\n      yield adapter.disconnect();\n    } finally {\n      setName(null);\n      setDisconnecting(false);\n    }\n  }), [disconnecting, adapter, setName, setDisconnecting]); // Send a transaction using the provided connection\n\n  const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.sendTransaction(transaction, connection, options);\n  }), [adapter, onError, connected]); // Sign a transaction if the wallet supports it\n\n  const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter ? transaction => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signTransaction(transaction);\n  }) : undefined, [adapter, onError, connected]); // Sign multiple transactions if the wallet supports it\n\n  const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter ? transactions => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signAllTransactions(transactions);\n  }) : undefined, [adapter, onError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  const signMessage = useMemo(() => adapter && 'signMessage' in adapter ? message => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signMessage(message);\n  }) : undefined, [adapter, onError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return () => {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets,\n      autoConnect,\n      select,\n      wallet,\n      adapter,\n      publicKey,\n      ready,\n      connecting,\n      disconnecting,\n      connected,\n      autoApprove,\n      connect,\n      disconnect,\n      sendTransaction,\n      signTransaction,\n      signAllTransactions,\n      signMessage\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { WalletNotConnectedError, WalletNotReadyError, } from '@solana/wallet-adapter-base';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { WalletNotSelectedError } from './errors';\r\nimport { useLocalStorage } from './useLocalStorage';\r\nimport { WalletContext } from './useWallet';\r\nconst initialState = {\r\n    wallet: null,\r\n    adapter: null,\r\n    ready: false,\r\n    publicKey: null,\r\n    connected: false,\r\n    autoApprove: false,\r\n};\r\nexport const WalletProvider = ({ children, wallets, autoConnect = false, onError = (error) => console.error(error), localStorageKey = 'walletName', }) => {\r\n    const [name, setName] = useLocalStorage(localStorageKey, null);\r\n    const [{ wallet, adapter, ready, publicKey, connected, autoApprove }, setState] = useState(initialState);\r\n    const [connecting, setConnecting] = useState(false);\r\n    const [disconnecting, setDisconnecting] = useState(false);\r\n    // Map of wallet names to wallets\r\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\r\n        walletsByName[wallet.name] = wallet;\r\n        return walletsByName;\r\n    }, {}), [wallets]);\r\n    // When the selected wallet changes, initialize the state\r\n    useEffect(() => {\r\n        const wallet = (name && walletsByName[name]) || null;\r\n        const adapter = wallet && wallet.adapter();\r\n        if (adapter) {\r\n            const { ready, publicKey, connected, autoApprove } = adapter;\r\n            setState({ wallet, adapter, connected, publicKey, ready, autoApprove });\r\n        }\r\n        else {\r\n            setState(initialState);\r\n        }\r\n    }, [name, walletsByName, setState]);\r\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\r\n    useEffect(() => {\r\n        if (autoConnect && adapter && ready && !connecting && !connected) {\r\n            (function () {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    setConnecting(true);\r\n                    try {\r\n                        yield adapter.connect();\r\n                    }\r\n                    catch (error) {\r\n                        // Clear the selected wallet\r\n                        setName(null);\r\n                        // Don't throw error, but onError will still be called\r\n                    }\r\n                    finally {\r\n                        setConnecting(false);\r\n                    }\r\n                });\r\n            })();\r\n        }\r\n    }, [autoConnect, adapter, ready, connecting, connected, setConnecting, setName]);\r\n    // Select a wallet by name\r\n    const select = useCallback((newName) => __awaiter(void 0, void 0, void 0, function* () {\r\n        if (name === newName)\r\n            return;\r\n        if (adapter)\r\n            yield adapter.disconnect();\r\n        setName(newName);\r\n    }), [name, adapter, setName]);\r\n    // Handle the adapter's ready event\r\n    const onReady = useCallback(() => setState((state) => (Object.assign(Object.assign({}, state), { ready: true }))), [setState]);\r\n    // Handle the adapter's connect event\r\n    const onConnect = useCallback(() => {\r\n        if (!adapter)\r\n            return;\r\n        const { connected, publicKey, ready, autoApprove } = adapter;\r\n        setState((state) => (Object.assign(Object.assign({}, state), { connected,\r\n            publicKey,\r\n            ready,\r\n            autoApprove })));\r\n    }, [adapter, setState]);\r\n    // Handle the adapter's disconnect event\r\n    const onDisconnect = useCallback(() => setName(null), [setName]);\r\n    // Connect the adapter to the wallet\r\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\r\n        if (connecting || disconnecting || connected)\r\n            return;\r\n        if (!wallet || !adapter) {\r\n            const error = new WalletNotSelectedError();\r\n            onError(error);\r\n            throw error;\r\n        }\r\n        if (!ready) {\r\n            setName(null);\r\n            if (typeof window !== 'undefined') {\r\n                window.open(wallet.url, '_blank');\r\n            }\r\n            const error = new WalletNotReadyError();\r\n            onError(error);\r\n            throw error;\r\n        }\r\n        setConnecting(true);\r\n        try {\r\n            yield adapter.connect();\r\n        }\r\n        catch (error) {\r\n            setName(null);\r\n            throw error;\r\n        }\r\n        finally {\r\n            setConnecting(false);\r\n        }\r\n    }), [connecting, disconnecting, connected, wallet, adapter, onError, ready, setName, setConnecting]);\r\n    // Disconnect the adapter from the wallet\r\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\r\n        if (disconnecting)\r\n            return;\r\n        if (!adapter)\r\n            return setName(null);\r\n        setDisconnecting(true);\r\n        try {\r\n            yield adapter.disconnect();\r\n        }\r\n        finally {\r\n            setName(null);\r\n            setDisconnecting(false);\r\n        }\r\n    }), [disconnecting, adapter, setName, setDisconnecting]);\r\n    // Send a transaction using the provided connection\r\n    const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\r\n        if (!adapter) {\r\n            const error = new WalletNotSelectedError();\r\n            onError(error);\r\n            throw error;\r\n        }\r\n        if (!connected) {\r\n            const error = new WalletNotConnectedError();\r\n            onError(error);\r\n            throw error;\r\n        }\r\n        return yield adapter.sendTransaction(transaction, connection, options);\r\n    }), [adapter, onError, connected]);\r\n    // Sign a transaction if the wallet supports it\r\n    const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter\r\n        ? (transaction) => __awaiter(void 0, void 0, void 0, function* () {\r\n            if (!connected) {\r\n                const error = new WalletNotConnectedError();\r\n                onError(error);\r\n                throw error;\r\n            }\r\n            return yield adapter.signTransaction(transaction);\r\n        })\r\n        : undefined, [adapter, onError, connected]);\r\n    // Sign multiple transactions if the wallet supports it\r\n    const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter\r\n        ? (transactions) => __awaiter(void 0, void 0, void 0, function* () {\r\n            if (!connected) {\r\n                const error = new WalletNotConnectedError();\r\n                onError(error);\r\n                throw error;\r\n            }\r\n            return yield adapter.signAllTransactions(transactions);\r\n        })\r\n        : undefined, [adapter, onError, connected]);\r\n    // Sign an arbitrary message if the wallet supports it\r\n    const signMessage = useMemo(() => adapter && 'signMessage' in adapter\r\n        ? (message) => __awaiter(void 0, void 0, void 0, function* () {\r\n            if (!connected) {\r\n                const error = new WalletNotConnectedError();\r\n                onError(error);\r\n                throw error;\r\n            }\r\n            return yield adapter.signMessage(message);\r\n        })\r\n        : undefined, [adapter, onError, connected]);\r\n    // Setup and teardown event listeners when the adapter changes\r\n    useEffect(() => {\r\n        if (adapter) {\r\n            adapter.on('ready', onReady);\r\n            adapter.on('connect', onConnect);\r\n            adapter.on('disconnect', onDisconnect);\r\n            adapter.on('error', onError);\r\n            return () => {\r\n                adapter.off('ready', onReady);\r\n                adapter.off('connect', onConnect);\r\n                adapter.off('disconnect', onDisconnect);\r\n                adapter.off('error', onError);\r\n            };\r\n        }\r\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\r\n    return (React.createElement(WalletContext.Provider, { value: {\r\n            wallets,\r\n            autoConnect,\r\n            select,\r\n            wallet,\r\n            adapter,\r\n            publicKey,\r\n            ready,\r\n            connecting,\r\n            disconnecting,\r\n            connected,\r\n            autoApprove,\r\n            connect,\r\n            disconnect,\r\n            sendTransaction,\r\n            signTransaction,\r\n            signAllTransactions,\r\n            signMessage,\r\n        } }, children));\r\n};\r\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}