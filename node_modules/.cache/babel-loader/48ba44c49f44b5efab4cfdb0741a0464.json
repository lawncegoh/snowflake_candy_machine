{"ast":null,"code":"export class IdlError extends Error {} // An error from a user defined program.\n\nexport class ProgramError extends Error {\n  constructor(code, msg, ...params) {\n    super(...params);\n    this.code = code;\n    this.msg = msg;\n  }\n\n  static parse(err, idlErrors) {\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let components = err.toString().split(\"custom program error: \");\n\n    if (components.length !== 2) {\n      return null;\n    }\n\n    let errorCode;\n\n    try {\n      errorCode = parseInt(components[1]);\n    } catch (parseErr) {\n      return null;\n    } // Parse user error.\n\n\n    let errorMsg = idlErrors.get(errorCode);\n\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg);\n    } // Parse framework internal error.\n\n\n    errorMsg = LangErrorMessage.get(errorCode);\n\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg);\n    } // Unable to parse the error. Just return the untranslated error.\n\n\n    return null;\n  }\n\n  toString() {\n    return this.msg;\n  }\n\n}\nconst LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  // State.\n  StateInvalidAddress: 180,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299\n};\nconst LangErrorMessage = new Map([// Instructions.\n[LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"], // Idl instructions.\n[LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"], // Constraints.\n[LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"], [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [LangErrorCode.ConstraintState, \"A state constraint was violated\"], [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"], // Accounts.\n[LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [LangErrorCode.AccountNotProgramOwned, \"The given account is not owned by the executing program\"], // State.\n[LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"], // Misc.\n[LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export class IdlError extends Error {\r\n}\r\n// An error from a user defined program.\r\nexport class ProgramError extends Error {\r\n    constructor(code, msg, ...params) {\r\n        super(...params);\r\n        this.code = code;\r\n        this.msg = msg;\r\n    }\r\n    static parse(err, idlErrors) {\r\n        // TODO: don't rely on the error string. web3.js should preserve the error\r\n        //       code information instead of giving us an untyped string.\r\n        let components = err.toString().split(\"custom program error: \");\r\n        if (components.length !== 2) {\r\n            return null;\r\n        }\r\n        let errorCode;\r\n        try {\r\n            errorCode = parseInt(components[1]);\r\n        }\r\n        catch (parseErr) {\r\n            return null;\r\n        }\r\n        // Parse user error.\r\n        let errorMsg = idlErrors.get(errorCode);\r\n        if (errorMsg !== undefined) {\r\n            return new ProgramError(errorCode, errorMsg);\r\n        }\r\n        // Parse framework internal error.\r\n        errorMsg = LangErrorMessage.get(errorCode);\r\n        if (errorMsg !== undefined) {\r\n            return new ProgramError(errorCode, errorMsg);\r\n        }\r\n        // Unable to parse the error. Just return the untranslated error.\r\n        return null;\r\n    }\r\n    toString() {\r\n        return this.msg;\r\n    }\r\n}\r\nconst LangErrorCode = {\r\n    // Instructions.\r\n    InstructionMissing: 100,\r\n    InstructionFallbackNotFound: 101,\r\n    InstructionDidNotDeserialize: 102,\r\n    InstructionDidNotSerialize: 103,\r\n    // IDL instructions.\r\n    IdlInstructionStub: 120,\r\n    IdlInstructionInvalidProgram: 121,\r\n    // Constraints.\r\n    ConstraintMut: 140,\r\n    ConstraintHasOne: 141,\r\n    ConstraintSigner: 142,\r\n    ConstraintRaw: 143,\r\n    ConstraintOwner: 144,\r\n    ConstraintRentExempt: 145,\r\n    ConstraintSeeds: 146,\r\n    ConstraintExecutable: 147,\r\n    ConstraintState: 148,\r\n    ConstraintAssociated: 149,\r\n    ConstraintAssociatedInit: 150,\r\n    ConstraintClose: 151,\r\n    ConstraintAddress: 152,\r\n    // Accounts.\r\n    AccountDiscriminatorAlreadySet: 160,\r\n    AccountDiscriminatorNotFound: 161,\r\n    AccountDiscriminatorMismatch: 162,\r\n    AccountDidNotDeserialize: 163,\r\n    AccountDidNotSerialize: 164,\r\n    AccountNotEnoughKeys: 165,\r\n    AccountNotMutable: 166,\r\n    AccountNotProgramOwned: 167,\r\n    // State.\r\n    StateInvalidAddress: 180,\r\n    // Used for APIs that shouldn't be used anymore.\r\n    Deprecated: 299,\r\n};\r\nconst LangErrorMessage = new Map([\r\n    // Instructions.\r\n    [\r\n        LangErrorCode.InstructionMissing,\r\n        \"8 byte instruction identifier not provided\",\r\n    ],\r\n    [\r\n        LangErrorCode.InstructionFallbackNotFound,\r\n        \"Fallback functions are not supported\",\r\n    ],\r\n    [\r\n        LangErrorCode.InstructionDidNotDeserialize,\r\n        \"The program could not deserialize the given instruction\",\r\n    ],\r\n    [\r\n        LangErrorCode.InstructionDidNotSerialize,\r\n        \"The program could not serialize the given instruction\",\r\n    ],\r\n    // Idl instructions.\r\n    [\r\n        LangErrorCode.IdlInstructionStub,\r\n        \"The program was compiled without idl instructions\",\r\n    ],\r\n    [\r\n        LangErrorCode.IdlInstructionInvalidProgram,\r\n        \"The transaction was given an invalid program for the IDL instruction\",\r\n    ],\r\n    // Constraints.\r\n    [LangErrorCode.ConstraintMut, \"A mut constraint was violated\"],\r\n    [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"],\r\n    [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"],\r\n    [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"],\r\n    [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"],\r\n    [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"],\r\n    [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"],\r\n    [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"],\r\n    [LangErrorCode.ConstraintState, \"A state constraint was violated\"],\r\n    [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"],\r\n    [\r\n        LangErrorCode.ConstraintAssociatedInit,\r\n        \"An associated init constraint was violated\",\r\n    ],\r\n    [LangErrorCode.ConstraintClose, \"A close constraint was violated\"],\r\n    [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\r\n    // Accounts.\r\n    [\r\n        LangErrorCode.AccountDiscriminatorAlreadySet,\r\n        \"The account discriminator was already set on this account\",\r\n    ],\r\n    [\r\n        LangErrorCode.AccountDiscriminatorNotFound,\r\n        \"No 8 byte discriminator was found on the account\",\r\n    ],\r\n    [\r\n        LangErrorCode.AccountDiscriminatorMismatch,\r\n        \"8 byte discriminator did not match what was expected\",\r\n    ],\r\n    [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"],\r\n    [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"],\r\n    [\r\n        LangErrorCode.AccountNotEnoughKeys,\r\n        \"Not enough account keys given to the instruction\",\r\n    ],\r\n    [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"],\r\n    [\r\n        LangErrorCode.AccountNotProgramOwned,\r\n        \"The given account is not owned by the executing program\",\r\n    ],\r\n    // State.\r\n    [\r\n        LangErrorCode.StateInvalidAddress,\r\n        \"The given state account does not have the correct address\",\r\n    ],\r\n    // Misc.\r\n    [\r\n        LangErrorCode.Deprecated,\r\n        \"The API being used is deprecated and should no longer be used\",\r\n    ],\r\n]);\r\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"module"}