{"ast":null,"code":"'use strict'; // This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n//\n// Utilities\n//\n\n/**\r\n * @param {number} a The number to test.\r\n * @param {number} min The minimum value in the range, inclusive.\r\n * @param {number} max The maximum value in the range, inclusive.\r\n * @return {boolean} True if a >= min and a <= max.\r\n */\n\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n/**\r\n * @param {*} o\r\n * @return {Object}\r\n */\n\n\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n/**\r\n * @param {string} string Input string of UTF-16 code units.\r\n * @return {!Array.<number>} Code points.\r\n */\n\n\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n  // 1. Let S be the DOMString value.\n  var s = String(string); // 2. Let n be the length of S.\n\n  var n = s.length; // 3. Initialize i to 0.\n\n  var i = 0; // 4. Initialize U to be an empty sequence of Unicode characters.\n\n  var u = []; // 5. While i < n:\n\n  while (i < n) {\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i); // 2. Depending on the value of c:\n    // c < 0xD800 or c > 0xDFFF\n\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    } // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n        // Append to U a U+FFFD REPLACEMENT CHARACTER.\n        u.push(0xFFFD);\n      } // 0xD800 ≤ c ≤ 0xDBFF\n      else if (0xD800 <= c && c <= 0xDBFF) {\n          // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n          // CHARACTER.\n          if (i === n - 1) {\n            u.push(0xFFFD);\n          } // 2. Otherwise, i < n−1:\n          else {\n              // 1. Let d be the code unit in S at index i+1.\n              var d = string.charCodeAt(i + 1); // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n\n              if (0xDC00 <= d && d <= 0xDFFF) {\n                // 1. Let a be c & 0x3FF.\n                var a = c & 0x3FF; // 2. Let b be d & 0x3FF.\n\n                var b = d & 0x3FF; // 3. Append to U the Unicode character with code point\n                // 2^16+2^10*a+b.\n\n                u.push(0x10000 + (a << 10) + b); // 4. Set i to i+1.\n\n                i += 1;\n              } // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n              // U+FFFD REPLACEMENT CHARACTER.\n              else {\n                  u.push(0xFFFD);\n                }\n            }\n        } // 3. Set i to i+1.\n\n\n    i += 1;\n  } // 6. Return U.\n\n\n  return u;\n}\n/**\r\n * @param {!Array.<number>} code_points Array of code points.\r\n * @return {string} string String of UTF-16 code units.\r\n */\n\n\nfunction codePointsToString(code_points) {\n  var s = '';\n\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n\n  return s;\n} //\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n//\n// 3. Terminology\n//\n\n/**\r\n * End-of-stream is a special token that signifies no more tokens\r\n * are in the stream.\r\n * @const\r\n */\n\n\nvar end_of_stream = -1;\n/**\r\n * A stream represents an ordered sequence of tokens.\r\n *\r\n * @constructor\r\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\r\n * stream.\r\n */\n\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\r\n   * @return {boolean} True if end-of-stream has been hit.\r\n   */\n  endOfStream: function () {\n    return !this.tokens.length;\n  },\n\n  /**\r\n   * When a token is read from a stream, the first token in the\r\n   * stream must be returned and subsequently removed, and\r\n   * end-of-stream must be returned otherwise.\r\n   *\r\n   * @return {number} Get the next token from the stream, or\r\n   * end_of_stream.\r\n   */\n  read: function () {\n    if (!this.tokens.length) return end_of_stream;\n    return this.tokens.shift();\n  },\n\n  /**\r\n   * When one or more tokens are prepended to a stream, those tokens\r\n   * must be inserted, in given order, before the first token in the\r\n   * stream.\r\n   *\r\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\r\n   */\n  prepend: function (token) {\n    if (Array.isArray(token)) {\n      var tokens =\n      /**@type {!Array.<number>}*/\n      token;\n\n      while (tokens.length) this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\r\n   * When one or more tokens are pushed to a stream, those tokens\r\n   * must be inserted, in given order, after the last token in the\r\n   * stream.\r\n   *\r\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\r\n   */\n  push: function (token) {\n    if (Array.isArray(token)) {\n      var tokens =\n      /**@type {!Array.<number>}*/\n      token;\n\n      while (tokens.length) this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n}; //\n// 4. Encodings\n//\n// 4.1 Encoders and decoders\n\n/** @const */\n\nvar finished = -1;\n/**\r\n * @param {boolean} fatal If true, decoding errors raise an exception.\r\n * @param {number=} opt_code_point Override the standard fallback code point.\r\n * @return {number} The code point to insert on a decoding error.\r\n */\n\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal) throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n/** @interface */\n\n\nfunction Decoder() {}\n\nDecoder.prototype = {\n  /**\r\n   * @param {Stream} stream The stream of bytes being decoded.\r\n   * @param {number} bite The next byte read from the stream.\r\n   * @return {?(number|!Array.<number>)} The next code point(s)\r\n   *     decoded, or null if not enough data exists in the input\r\n   *     stream to decode a complete code point, or |finished|.\r\n   */\n  handler: function (stream, bite) {}\n};\n/** @interface */\n\nfunction Encoder() {}\n\nEncoder.prototype = {\n  /**\r\n   * @param {Stream} stream The stream of code points being encoded.\r\n   * @param {number} code_point Next code point read from the stream.\r\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\r\n   */\n  handler: function (stream, code_point) {}\n}; //\n// 7. API\n//\n\n/** @const */\n\nvar DEFAULT_ENCODING = 'utf-8'; // 7.1 Interface TextDecoder\n\n/**\r\n * @constructor\r\n * @param {string=} encoding The label of the encoding;\r\n *     defaults to 'utf-8'.\r\n * @param {Object=} options\r\n */\n\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n\n  options = ToDictionary(options);\n  /** @private @type {boolean} */\n\n  this._streaming = false;\n  /** @private @type {boolean} */\n\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n\n  this._decoder = null;\n  /** @private @type {boolean} */\n\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n  Object.defineProperty(this, 'encoding', {\n    value: 'utf-8'\n  });\n  Object.defineProperty(this, 'fatal', {\n    value: this._fatal\n  });\n  Object.defineProperty(this, 'ignoreBOM', {\n    value: this._ignoreBOM\n  });\n}\n\nTextDecoder.prototype = {\n  /**\r\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\r\n   * @param {Object=} options\r\n   * @return {string} The decoded string.\r\n   */\n  decode: function decode(input, options) {\n    var bytes;\n\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({\n        fatal: this._fatal\n      });\n      this._BOMseen = false;\n    }\n\n    this._streaming = Boolean(options['stream']);\n    var input_stream = new Stream(bytes);\n    var code_points = [];\n    /** @type {?(number|!Array.<number>)} */\n\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished) break;\n      if (result === null) continue;\n      if (Array.isArray(result)) code_points.push.apply(code_points,\n      /**@type {!Array.<number>}*/\n      result);else code_points.push(result);\n    }\n\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished) break;\n        if (result === null) continue;\n        if (Array.isArray(result)) code_points.push.apply(code_points,\n        /**@type {!Array.<number>}*/\n        result);else code_points.push(result);\n      } while (!input_stream.endOfStream());\n\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n}; // 7.2 Interface TextEncoder\n\n/**\r\n * @constructor\r\n * @param {string=} encoding The label of the encoding;\r\n *     defaults to 'utf-8'.\r\n * @param {Object=} options\r\n */\n\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder)) return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n\n  options = ToDictionary(options);\n  /** @private @type {boolean} */\n\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n\n  this._options = {\n    fatal: Boolean(options['fatal'])\n  };\n  Object.defineProperty(this, 'encoding', {\n    value: 'utf-8'\n  });\n}\n\nTextEncoder.prototype = {\n  /**\r\n   * @param {string=} opt_string The string to encode.\r\n   * @param {Object=} options\r\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\r\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options); // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n\n    if (!this._streaming) this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished) break;\n      if (Array.isArray(result)) bytes.push.apply(bytes,\n      /**@type {!Array.<number>}*/\n      result);else bytes.push(result);\n    }\n\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished) break;\n        if (Array.isArray(result)) bytes.push.apply(bytes,\n        /**@type {!Array.<number>}*/\n        result);else bytes.push(result);\n      }\n\n      this._encoder = null;\n    }\n\n    return new Uint8Array(bytes);\n  }\n}; //\n// 8. The encoding\n//\n// 8.1 utf-8\n\n/**\r\n * @constructor\r\n * @implements {Decoder}\r\n * @param {{fatal: boolean}} options\r\n */\n\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal; // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n\n  var\n  /** @type {number} */\n  utf8_code_point = 0,\n\n  /** @type {number} */\n  utf8_bytes_seen = 0,\n\n  /** @type {number} */\n  utf8_bytes_needed = 0,\n\n  /** @type {number} */\n  utf8_lower_boundary = 0x80,\n\n  /** @type {number} */\n  utf8_upper_boundary = 0xBF;\n  /**\r\n   * @param {Stream} stream The stream of bytes being decoded.\r\n   * @param {number} bite The next byte read from the stream.\r\n   * @return {?(number|!Array.<number>)} The next code point(s)\r\n   *     decoded, or null if not enough data exists in the input\r\n   *     stream to decode a complete code point.\r\n   */\n\n  this.handler = function (stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    } // 2. If byte is end-of-stream, return finished.\n\n\n    if (bite === end_of_stream) return finished; // 3. If utf-8 bytes needed is 0, based on byte:\n\n    if (utf8_bytes_needed === 0) {\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      } // 0xC2 to 0xDF\n\n\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      } // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n          if (bite === 0xE0) utf8_lower_boundary = 0xA0; // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n\n          if (bite === 0xED) utf8_upper_boundary = 0x9F; // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n          // byte − 0xE0.\n\n          utf8_bytes_needed = 2;\n          utf8_code_point = bite - 0xE0;\n        } // 0xF0 to 0xF4\n        else if (inRange(bite, 0xF0, 0xF4)) {\n            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n            if (bite === 0xF0) utf8_lower_boundary = 0x90; // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n\n            if (bite === 0xF4) utf8_upper_boundary = 0x8F; // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n            // byte − 0xF0.\n\n            utf8_bytes_needed = 3;\n            utf8_code_point = bite - 0xF0;\n          } // Otherwise\n          else {\n              // Return error.\n              return decoderError(fatal);\n            } // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n\n\n      utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;\n      return null;\n    } // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n\n\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF; // 2. Prepend byte to stream.\n\n      stream.prepend(bite); // 3. Return error.\n\n      return decoderError(fatal);\n    } // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n\n\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF; // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n\n    utf8_bytes_seen += 1;\n    utf8_code_point += bite - 0x80 << 6 * (utf8_bytes_needed - utf8_bytes_seen); // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n\n    if (utf8_bytes_seen !== utf8_bytes_needed) return null; // 8. Let code point be utf-8 code point.\n\n    var code_point = utf8_code_point; // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0; // 10. Return a code point whose value is code point.\n\n    return code_point;\n  };\n}\n/**\r\n * @constructor\r\n * @implements {Encoder}\r\n * @param {{fatal: boolean}} options\r\n */\n\n\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\r\n   * @param {Stream} stream Input stream.\r\n   * @param {number} code_point Next code point read from the stream.\r\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\r\n   */\n\n  this.handler = function (stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream) return finished; // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n\n    if (inRange(code_point, 0x0000, 0x007f)) return code_point; // 3. Set count and offset based on the range code point is in:\n\n    var count, offset; // U+0080 to U+07FF:    1 and 0xC0\n\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    } // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n        count = 2;\n        offset = 0xE0;\n      } // U+10000 to U+10FFFF: 3 and 0xF0\n      else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n          count = 3;\n          offset = 0xF0;\n        } // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n\n\n    var bytes = [(code_point >> 6 * count) + offset]; // 5. Run these substeps while count is greater than 0:\n\n    while (count > 0) {\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> 6 * (count - 1); // 2. Append to bytes 0x80 | (temp & 0x3F).\n\n      bytes.push(0x80 | temp & 0x3F); // 3. Decrease count by one.\n\n      count -= 1;\n    } // 6. Return bytes bytes, in order.\n\n\n    return bytes;\n  };\n}\n\nexport { TextEncoder, TextDecoder };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/snowflake_candy_machine/node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"names":["inRange","a","min","max","ToDictionary","o","undefined","Object","TypeError","stringToCodePoints","string","s","String","n","length","i","u","c","charCodeAt","push","d","b","codePointsToString","code_points","cp","fromCharCode","end_of_stream","Stream","tokens","slice","call","prototype","endOfStream","read","shift","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","Decoder","handler","stream","bite","Encoder","code_point","DEFAULT_ENCODING","TextDecoder","encoding","options","toLowerCase","Error","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","defineProperty","value","decode","input","bytes","ArrayBuffer","Uint8Array","buffer","byteOffset","byteLength","UTF8Decoder","input_stream","result","apply","indexOf","TextEncoder","_encoder","_options","encode","opt_string","UTF8Encoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","count","offset","temp"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n// This is free and unencumbered software released into the public domain.\r\n// See LICENSE.md for more information.\r\n\r\n//\r\n// Utilities\r\n//\r\n\r\n/**\r\n * @param {number} a The number to test.\r\n * @param {number} min The minimum value in the range, inclusive.\r\n * @param {number} max The maximum value in the range, inclusive.\r\n * @return {boolean} True if a >= min and a <= max.\r\n */\r\nfunction inRange(a, min, max) {\r\n  return min <= a && a <= max;\r\n}\r\n\r\n/**\r\n * @param {*} o\r\n * @return {Object}\r\n */\r\nfunction ToDictionary(o) {\r\n  if (o === undefined) return {};\r\n  if (o === Object(o)) return o;\r\n  throw TypeError('Could not convert argument to dictionary');\r\n}\r\n\r\n/**\r\n * @param {string} string Input string of UTF-16 code units.\r\n * @return {!Array.<number>} Code points.\r\n */\r\nfunction stringToCodePoints(string) {\r\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\r\n\r\n  // 1. Let S be the DOMString value.\r\n  var s = String(string);\r\n\r\n  // 2. Let n be the length of S.\r\n  var n = s.length;\r\n\r\n  // 3. Initialize i to 0.\r\n  var i = 0;\r\n\r\n  // 4. Initialize U to be an empty sequence of Unicode characters.\r\n  var u = [];\r\n\r\n  // 5. While i < n:\r\n  while (i < n) {\r\n\r\n    // 1. Let c be the code unit in S at index i.\r\n    var c = s.charCodeAt(i);\r\n\r\n    // 2. Depending on the value of c:\r\n\r\n    // c < 0xD800 or c > 0xDFFF\r\n    if (c < 0xD800 || c > 0xDFFF) {\r\n      // Append to U the Unicode character with code point c.\r\n      u.push(c);\r\n    }\r\n\r\n    // 0xDC00 ≤ c ≤ 0xDFFF\r\n    else if (0xDC00 <= c && c <= 0xDFFF) {\r\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\r\n      u.push(0xFFFD);\r\n    }\r\n\r\n    // 0xD800 ≤ c ≤ 0xDBFF\r\n    else if (0xD800 <= c && c <= 0xDBFF) {\r\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\r\n      // CHARACTER.\r\n      if (i === n - 1) {\r\n        u.push(0xFFFD);\r\n      }\r\n      // 2. Otherwise, i < n−1:\r\n      else {\r\n        // 1. Let d be the code unit in S at index i+1.\r\n        var d = string.charCodeAt(i + 1);\r\n\r\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\r\n        if (0xDC00 <= d && d <= 0xDFFF) {\r\n          // 1. Let a be c & 0x3FF.\r\n          var a = c & 0x3FF;\r\n\r\n          // 2. Let b be d & 0x3FF.\r\n          var b = d & 0x3FF;\r\n\r\n          // 3. Append to U the Unicode character with code point\r\n          // 2^16+2^10*a+b.\r\n          u.push(0x10000 + (a << 10) + b);\r\n\r\n          // 4. Set i to i+1.\r\n          i += 1;\r\n        }\r\n\r\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\r\n        // U+FFFD REPLACEMENT CHARACTER.\r\n        else  {\r\n          u.push(0xFFFD);\r\n        }\r\n      }\r\n    }\r\n\r\n    // 3. Set i to i+1.\r\n    i += 1;\r\n  }\r\n\r\n  // 6. Return U.\r\n  return u;\r\n}\r\n\r\n/**\r\n * @param {!Array.<number>} code_points Array of code points.\r\n * @return {string} string String of UTF-16 code units.\r\n */\r\nfunction codePointsToString(code_points) {\r\n  var s = '';\r\n  for (var i = 0; i < code_points.length; ++i) {\r\n    var cp = code_points[i];\r\n    if (cp <= 0xFFFF) {\r\n      s += String.fromCharCode(cp);\r\n    } else {\r\n      cp -= 0x10000;\r\n      s += String.fromCharCode((cp >> 10) + 0xD800,\r\n                               (cp & 0x3FF) + 0xDC00);\r\n    }\r\n  }\r\n  return s;\r\n}\r\n\r\n\r\n//\r\n// Implementation of Encoding specification\r\n// https://encoding.spec.whatwg.org/\r\n//\r\n\r\n//\r\n// 3. Terminology\r\n//\r\n\r\n/**\r\n * End-of-stream is a special token that signifies no more tokens\r\n * are in the stream.\r\n * @const\r\n */ var end_of_stream = -1;\r\n\r\n/**\r\n * A stream represents an ordered sequence of tokens.\r\n *\r\n * @constructor\r\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\r\n * stream.\r\n */\r\nfunction Stream(tokens) {\r\n  /** @type {!Array.<number>} */\r\n  this.tokens = [].slice.call(tokens);\r\n}\r\n\r\nStream.prototype = {\r\n  /**\r\n   * @return {boolean} True if end-of-stream has been hit.\r\n   */\r\n  endOfStream: function() {\r\n    return !this.tokens.length;\r\n  },\r\n\r\n  /**\r\n   * When a token is read from a stream, the first token in the\r\n   * stream must be returned and subsequently removed, and\r\n   * end-of-stream must be returned otherwise.\r\n   *\r\n   * @return {number} Get the next token from the stream, or\r\n   * end_of_stream.\r\n   */\r\n   read: function() {\r\n    if (!this.tokens.length)\r\n      return end_of_stream;\r\n     return this.tokens.shift();\r\n   },\r\n\r\n  /**\r\n   * When one or more tokens are prepended to a stream, those tokens\r\n   * must be inserted, in given order, before the first token in the\r\n   * stream.\r\n   *\r\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\r\n   */\r\n  prepend: function(token) {\r\n    if (Array.isArray(token)) {\r\n      var tokens = /**@type {!Array.<number>}*/(token);\r\n      while (tokens.length)\r\n        this.tokens.unshift(tokens.pop());\r\n    } else {\r\n      this.tokens.unshift(token);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * When one or more tokens are pushed to a stream, those tokens\r\n   * must be inserted, in given order, after the last token in the\r\n   * stream.\r\n   *\r\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\r\n   */\r\n  push: function(token) {\r\n    if (Array.isArray(token)) {\r\n      var tokens = /**@type {!Array.<number>}*/(token);\r\n      while (tokens.length)\r\n        this.tokens.push(tokens.shift());\r\n    } else {\r\n      this.tokens.push(token);\r\n    }\r\n  }\r\n};\r\n\r\n//\r\n// 4. Encodings\r\n//\r\n\r\n// 4.1 Encoders and decoders\r\n\r\n/** @const */\r\nvar finished = -1;\r\n\r\n/**\r\n * @param {boolean} fatal If true, decoding errors raise an exception.\r\n * @param {number=} opt_code_point Override the standard fallback code point.\r\n * @return {number} The code point to insert on a decoding error.\r\n */\r\nfunction decoderError(fatal, opt_code_point) {\r\n  if (fatal)\r\n    throw TypeError('Decoder error');\r\n  return opt_code_point || 0xFFFD;\r\n}\r\n\r\n/** @interface */\r\nfunction Decoder() {}\r\nDecoder.prototype = {\r\n  /**\r\n   * @param {Stream} stream The stream of bytes being decoded.\r\n   * @param {number} bite The next byte read from the stream.\r\n   * @return {?(number|!Array.<number>)} The next code point(s)\r\n   *     decoded, or null if not enough data exists in the input\r\n   *     stream to decode a complete code point, or |finished|.\r\n   */\r\n  handler: function(stream, bite) {}\r\n};\r\n\r\n/** @interface */\r\nfunction Encoder() {}\r\nEncoder.prototype = {\r\n  /**\r\n   * @param {Stream} stream The stream of code points being encoded.\r\n   * @param {number} code_point Next code point read from the stream.\r\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\r\n   */\r\n  handler: function(stream, code_point) {}\r\n};\r\n\r\n//\r\n// 7. API\r\n//\r\n\r\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\r\n\r\n// 7.1 Interface TextDecoder\r\n\r\n/**\r\n * @constructor\r\n * @param {string=} encoding The label of the encoding;\r\n *     defaults to 'utf-8'.\r\n * @param {Object=} options\r\n */\r\nfunction TextDecoder(encoding, options) {\r\n  if (!(this instanceof TextDecoder)) {\r\n    return new TextDecoder(encoding, options);\r\n  }\r\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\r\n  if (encoding !== DEFAULT_ENCODING) {\r\n    throw new Error('Encoding not supported. Only utf-8 is supported');\r\n  }\r\n  options = ToDictionary(options);\r\n\r\n  /** @private @type {boolean} */\r\n  this._streaming = false;\r\n  /** @private @type {boolean} */\r\n  this._BOMseen = false;\r\n  /** @private @type {?Decoder} */\r\n  this._decoder = null;\r\n  /** @private @type {boolean} */\r\n  this._fatal = Boolean(options['fatal']);\r\n  /** @private @type {boolean} */\r\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\r\n\r\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\r\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\r\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\r\n}\r\n\r\nTextDecoder.prototype = {\r\n  /**\r\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\r\n   * @param {Object=} options\r\n   * @return {string} The decoded string.\r\n   */\r\n  decode: function decode(input, options) {\r\n    var bytes;\r\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\r\n      bytes = new Uint8Array(input);\r\n    } else if (typeof input === 'object' && 'buffer' in input &&\r\n               input.buffer instanceof ArrayBuffer) {\r\n      bytes = new Uint8Array(input.buffer,\r\n                             input.byteOffset,\r\n                             input.byteLength);\r\n    } else {\r\n      bytes = new Uint8Array(0);\r\n    }\r\n\r\n    options = ToDictionary(options);\r\n\r\n    if (!this._streaming) {\r\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\r\n      this._BOMseen = false;\r\n    }\r\n    this._streaming = Boolean(options['stream']);\r\n\r\n    var input_stream = new Stream(bytes);\r\n\r\n    var code_points = [];\r\n\r\n    /** @type {?(number|!Array.<number>)} */\r\n    var result;\r\n\r\n    while (!input_stream.endOfStream()) {\r\n      result = this._decoder.handler(input_stream, input_stream.read());\r\n      if (result === finished)\r\n        break;\r\n      if (result === null)\r\n        continue;\r\n      if (Array.isArray(result))\r\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\r\n      else\r\n        code_points.push(result);\r\n    }\r\n    if (!this._streaming) {\r\n      do {\r\n        result = this._decoder.handler(input_stream, input_stream.read());\r\n        if (result === finished)\r\n          break;\r\n        if (result === null)\r\n          continue;\r\n        if (Array.isArray(result))\r\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\r\n        else\r\n          code_points.push(result);\r\n      } while (!input_stream.endOfStream());\r\n      this._decoder = null;\r\n    }\r\n\r\n    if (code_points.length) {\r\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\r\n      // ignore BOM flag and BOM seen flag are unset, run these\r\n      // subsubsteps:\r\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\r\n          !this._ignoreBOM && !this._BOMseen) {\r\n        // If token is U+FEFF, set BOM seen flag.\r\n        if (code_points[0] === 0xFEFF) {\r\n          this._BOMseen = true;\r\n          code_points.shift();\r\n        } else {\r\n          // Otherwise, if token is not end-of-stream, set BOM seen\r\n          // flag and append token to output.\r\n          this._BOMseen = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return codePointsToString(code_points);\r\n  }\r\n};\r\n\r\n// 7.2 Interface TextEncoder\r\n\r\n/**\r\n * @constructor\r\n * @param {string=} encoding The label of the encoding;\r\n *     defaults to 'utf-8'.\r\n * @param {Object=} options\r\n */\r\nfunction TextEncoder(encoding, options) {\r\n  if (!(this instanceof TextEncoder))\r\n    return new TextEncoder(encoding, options);\r\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\r\n  if (encoding !== DEFAULT_ENCODING) {\r\n    throw new Error('Encoding not supported. Only utf-8 is supported');\r\n  }\r\n  options = ToDictionary(options);\r\n\r\n  /** @private @type {boolean} */\r\n  this._streaming = false;\r\n  /** @private @type {?Encoder} */\r\n  this._encoder = null;\r\n  /** @private @type {{fatal: boolean}} */\r\n  this._options = {fatal: Boolean(options['fatal'])};\r\n\r\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\r\n}\r\n\r\nTextEncoder.prototype = {\r\n  /**\r\n   * @param {string=} opt_string The string to encode.\r\n   * @param {Object=} options\r\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\r\n   */\r\n  encode: function encode(opt_string, options) {\r\n    opt_string = opt_string ? String(opt_string) : '';\r\n    options = ToDictionary(options);\r\n\r\n    // NOTE: This option is nonstandard. None of the encodings\r\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\r\n    // so streaming is not necessary.\r\n    if (!this._streaming)\r\n      this._encoder = new UTF8Encoder(this._options);\r\n    this._streaming = Boolean(options['stream']);\r\n\r\n    var bytes = [];\r\n    var input_stream = new Stream(stringToCodePoints(opt_string));\r\n    /** @type {?(number|!Array.<number>)} */\r\n    var result;\r\n    while (!input_stream.endOfStream()) {\r\n      result = this._encoder.handler(input_stream, input_stream.read());\r\n      if (result === finished)\r\n        break;\r\n      if (Array.isArray(result))\r\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\r\n      else\r\n        bytes.push(result);\r\n    }\r\n    if (!this._streaming) {\r\n      while (true) {\r\n        result = this._encoder.handler(input_stream, input_stream.read());\r\n        if (result === finished)\r\n          break;\r\n        if (Array.isArray(result))\r\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\r\n        else\r\n          bytes.push(result);\r\n      }\r\n      this._encoder = null;\r\n    }\r\n    return new Uint8Array(bytes);\r\n  }\r\n};\r\n\r\n//\r\n// 8. The encoding\r\n//\r\n\r\n// 8.1 utf-8\r\n\r\n/**\r\n * @constructor\r\n * @implements {Decoder}\r\n * @param {{fatal: boolean}} options\r\n */\r\nfunction UTF8Decoder(options) {\r\n  var fatal = options.fatal;\r\n\r\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\r\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\r\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\r\n  // (initially 0xBF).\r\n  var /** @type {number} */ utf8_code_point = 0,\r\n      /** @type {number} */ utf8_bytes_seen = 0,\r\n      /** @type {number} */ utf8_bytes_needed = 0,\r\n      /** @type {number} */ utf8_lower_boundary = 0x80,\r\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\r\n\r\n  /**\r\n   * @param {Stream} stream The stream of bytes being decoded.\r\n   * @param {number} bite The next byte read from the stream.\r\n   * @return {?(number|!Array.<number>)} The next code point(s)\r\n   *     decoded, or null if not enough data exists in the input\r\n   *     stream to decode a complete code point.\r\n   */\r\n  this.handler = function(stream, bite) {\r\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\r\n    // set utf-8 bytes needed to 0 and return error.\r\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\r\n      utf8_bytes_needed = 0;\r\n      return decoderError(fatal);\r\n    }\r\n\r\n    // 2. If byte is end-of-stream, return finished.\r\n    if (bite === end_of_stream)\r\n      return finished;\r\n\r\n    // 3. If utf-8 bytes needed is 0, based on byte:\r\n    if (utf8_bytes_needed === 0) {\r\n\r\n      // 0x00 to 0x7F\r\n      if (inRange(bite, 0x00, 0x7F)) {\r\n        // Return a code point whose value is byte.\r\n        return bite;\r\n      }\r\n\r\n      // 0xC2 to 0xDF\r\n      if (inRange(bite, 0xC2, 0xDF)) {\r\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\r\n        // − 0xC0.\r\n        utf8_bytes_needed = 1;\r\n        utf8_code_point = bite - 0xC0;\r\n      }\r\n\r\n      // 0xE0 to 0xEF\r\n      else if (inRange(bite, 0xE0, 0xEF)) {\r\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\r\n        if (bite === 0xE0)\r\n          utf8_lower_boundary = 0xA0;\r\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\r\n        if (bite === 0xED)\r\n          utf8_upper_boundary = 0x9F;\r\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\r\n        // byte − 0xE0.\r\n        utf8_bytes_needed = 2;\r\n        utf8_code_point = bite - 0xE0;\r\n      }\r\n\r\n      // 0xF0 to 0xF4\r\n      else if (inRange(bite, 0xF0, 0xF4)) {\r\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\r\n        if (bite === 0xF0)\r\n          utf8_lower_boundary = 0x90;\r\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\r\n        if (bite === 0xF4)\r\n          utf8_upper_boundary = 0x8F;\r\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\r\n        // byte − 0xF0.\r\n        utf8_bytes_needed = 3;\r\n        utf8_code_point = bite - 0xF0;\r\n      }\r\n\r\n      // Otherwise\r\n      else {\r\n        // Return error.\r\n        return decoderError(fatal);\r\n      }\r\n\r\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\r\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\r\n      // return continue.\r\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\r\n      return null;\r\n    }\r\n\r\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\r\n    // upper boundary, run these substeps:\r\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\r\n\r\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\r\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\r\n      // utf-8 upper boundary to 0xBF.\r\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\r\n      utf8_lower_boundary = 0x80;\r\n      utf8_upper_boundary = 0xBF;\r\n\r\n      // 2. Prepend byte to stream.\r\n      stream.prepend(bite);\r\n\r\n      // 3. Return error.\r\n      return decoderError(fatal);\r\n    }\r\n\r\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\r\n    // to 0xBF.\r\n    utf8_lower_boundary = 0x80;\r\n    utf8_upper_boundary = 0xBF;\r\n\r\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\r\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\r\n    // needed − utf-8 bytes seen)).\r\n    utf8_bytes_seen += 1;\r\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\r\n\r\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\r\n    // continue.\r\n    if (utf8_bytes_seen !== utf8_bytes_needed)\r\n      return null;\r\n\r\n    // 8. Let code point be utf-8 code point.\r\n    var code_point = utf8_code_point;\r\n\r\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\r\n    // seen to 0.\r\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\r\n\r\n    // 10. Return a code point whose value is code point.\r\n    return code_point;\r\n  };\r\n}\r\n\r\n/**\r\n * @constructor\r\n * @implements {Encoder}\r\n * @param {{fatal: boolean}} options\r\n */\r\nfunction UTF8Encoder(options) {\r\n  var fatal = options.fatal;\r\n  /**\r\n   * @param {Stream} stream Input stream.\r\n   * @param {number} code_point Next code point read from the stream.\r\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\r\n   */\r\n  this.handler = function(stream, code_point) {\r\n    // 1. If code point is end-of-stream, return finished.\r\n    if (code_point === end_of_stream)\r\n      return finished;\r\n\r\n    // 2. If code point is in the range U+0000 to U+007F, return a\r\n    // byte whose value is code point.\r\n    if (inRange(code_point, 0x0000, 0x007f))\r\n      return code_point;\r\n\r\n    // 3. Set count and offset based on the range code point is in:\r\n    var count, offset;\r\n    // U+0080 to U+07FF:    1 and 0xC0\r\n    if (inRange(code_point, 0x0080, 0x07FF)) {\r\n      count = 1;\r\n      offset = 0xC0;\r\n    }\r\n    // U+0800 to U+FFFF:    2 and 0xE0\r\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\r\n      count = 2;\r\n      offset = 0xE0;\r\n    }\r\n    // U+10000 to U+10FFFF: 3 and 0xF0\r\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\r\n      count = 3;\r\n      offset = 0xF0;\r\n    }\r\n\r\n    // 4.Let bytes be a byte sequence whose first byte is (code\r\n    // point >> (6 × count)) + offset.\r\n    var bytes = [(code_point >> (6 * count)) + offset];\r\n\r\n    // 5. Run these substeps while count is greater than 0:\r\n    while (count > 0) {\r\n\r\n      // 1. Set temp to code point >> (6 × (count − 1)).\r\n      var temp = code_point >> (6 * (count - 1));\r\n\r\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\r\n      bytes.push(0x80 | (temp & 0x3F));\r\n\r\n      // 3. Decrease count by one.\r\n      count -= 1;\r\n    }\r\n\r\n    // 6. Return bytes bytes, in order.\r\n    return bytes;\r\n  };\r\n}\r\n\r\nexport {TextEncoder, TextDecoder};\r\n"]},"metadata":{},"sourceType":"module"}