{"ast":null,"code":"import assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\r\n * Sends a transaction to a program with the given accounts and instruction\r\n * data.\r\n */\n\nexport async function invoke(programId, accounts, data, provider) {\n  programId = translateAddress(programId);\n\n  if (!provider) {\n    provider = getProvider();\n  }\n\n  const tx = new Transaction();\n  tx.add(new TransactionInstruction({\n    programId,\n    keys: accounts !== null && accounts !== void 0 ? accounts : [],\n    data\n  }));\n  return await provider.send(tx);\n}\nexport async function getMultipleAccounts(connection, publicKeys) {\n  const args = [publicKeys.map(k => k.toBase58()), {\n    commitment: \"recent\"\n  }]; // @ts-ignore\n\n  const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\n\n  if (res.error) {\n    throw new Error(\"failed to get info about accounts \" + publicKeys.map(k => k.toBase58()).join(\", \") + \": \" + res.error.message);\n  }\n\n  assert(typeof res.result !== \"undefined\");\n  const accounts = [];\n\n  for (const account of res.result.value) {\n    let value = null;\n\n    if (account === null) {\n      accounts.push(null);\n      continue;\n    }\n\n    if (res.result.value) {\n      const {\n        executable,\n        owner,\n        lamports,\n        data\n      } = account;\n      assert(data[1] === \"base64\");\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], \"base64\")\n      };\n    }\n\n    if (value === null) {\n      throw new Error(\"Invalid response\");\n    }\n\n    accounts.push(value);\n  }\n\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n\n    return {\n      publicKey: publicKeys[idx],\n      account\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/utils/rpc.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,QAAnB;AACA,SAIE,SAJF,EAME,WANF,EAOE,sBAPF,QAQO,iBARP;AASA,SAAkB,gBAAlB,QAA0C,mBAA1C;AACA,SAAmB,WAAnB,QAAsC,aAAtC;AAEA;;;AAGG;;AACH,OAAO,eAAe,MAAf,CACL,SADK,EAEL,QAFK,EAGL,IAHK,EAIL,QAJK,EAIc;AAEnB,EAAA,SAAS,GAAG,gBAAgB,CAAC,SAAD,CAA5B;;AACA,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,WAAW,EAAtB;AACD;;AAED,QAAM,EAAE,GAAG,IAAI,WAAJ,EAAX;AACA,EAAA,EAAE,CAAC,GAAH,CACE,IAAI,sBAAJ,CAA2B;AACzB,IAAA,SADyB;AAEzB,IAAA,IAAI,EAAE,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,EAFO;AAGzB,IAAA;AAHyB,GAA3B,CADF;AAQA,SAAO,MAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,CAAb;AACD;AAED,OAAO,eAAe,mBAAf,CACL,UADK,EAEL,UAFK,EAEkB;AAIvB,QAAM,IAAI,GAAG,CAAC,UAAU,CAAC,GAAX,CAAgB,CAAD,IAAO,CAAC,CAAC,QAAF,EAAtB,CAAD,EAAsC;AAAE,IAAA,UAAU,EAAE;AAAd,GAAtC,CAAb,CAJuB,CAKvB;;AACA,QAAM,GAAG,GAAG,MAAM,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAAlB;;AACA,MAAI,GAAG,CAAC,KAAR,EAAe;AACb,UAAM,IAAI,KAAJ,CACJ,uCACE,UAAU,CAAC,GAAX,CAAgB,CAAD,IAAO,CAAC,CAAC,QAAF,EAAtB,EAAoC,IAApC,CAAyC,IAAzC,CADF,GAEE,IAFF,GAGE,GAAG,CAAC,KAAJ,CAAU,OAJR,CAAN;AAMD;;AACD,EAAA,MAAM,CAAC,OAAO,GAAG,CAAC,MAAX,KAAsB,WAAvB,CAAN;AACA,QAAM,QAAQ,GAKT,EALL;;AAMA,OAAK,MAAM,OAAX,IAAsB,GAAG,CAAC,MAAJ,CAAW,KAAjC,EAAwC;AACtC,QAAI,KAAK,GAKE,IALX;;AAMA,QAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,MAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACA;AACD;;AACD,QAAI,GAAG,CAAC,MAAJ,CAAW,KAAf,EAAsB;AACpB,YAAM;AAAE,QAAA,UAAF;AAAc,QAAA,KAAd;AAAqB,QAAA,QAArB;AAA+B,QAAA;AAA/B,UAAwC,OAA9C;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAb,CAAN;AACA,MAAA,KAAK,GAAG;AACN,QAAA,UADM;AAEN,QAAA,KAAK,EAAE,IAAI,SAAJ,CAAc,KAAd,CAFD;AAGN,QAAA,QAHM;AAIN,QAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB;AAJA,OAAR;AAMD;;AACD,QAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,IAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACD;;AACD,SAAO,QAAQ,CAAC,GAAT,CAAa,CAAC,OAAD,EAAU,GAAV,KAAiB;AACnC,QAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,IAAP;AACD;;AACD,WAAO;AACL,MAAA,SAAS,EAAE,UAAU,CAAC,GAAD,CADhB;AAEL,MAAA;AAFK,KAAP;AAID,GARM,CAAP;AASD","sourceRoot":"","sourcesContent":["import assert from \"assert\";\r\nimport { PublicKey, Transaction, TransactionInstruction, } from \"@solana/web3.js\";\r\nimport { translateAddress } from \"../program/common\";\r\nimport { getProvider } from \"../provider\";\r\n/**\r\n * Sends a transaction to a program with the given accounts and instruction\r\n * data.\r\n */\r\nexport async function invoke(programId, accounts, data, provider) {\r\n    programId = translateAddress(programId);\r\n    if (!provider) {\r\n        provider = getProvider();\r\n    }\r\n    const tx = new Transaction();\r\n    tx.add(new TransactionInstruction({\r\n        programId,\r\n        keys: accounts !== null && accounts !== void 0 ? accounts : [],\r\n        data,\r\n    }));\r\n    return await provider.send(tx);\r\n}\r\nexport async function getMultipleAccounts(connection, publicKeys) {\r\n    const args = [publicKeys.map((k) => k.toBase58()), { commitment: \"recent\" }];\r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\r\n    if (res.error) {\r\n        throw new Error(\"failed to get info about accounts \" +\r\n            publicKeys.map((k) => k.toBase58()).join(\", \") +\r\n            \": \" +\r\n            res.error.message);\r\n    }\r\n    assert(typeof res.result !== \"undefined\");\r\n    const accounts = [];\r\n    for (const account of res.result.value) {\r\n        let value = null;\r\n        if (account === null) {\r\n            accounts.push(null);\r\n            continue;\r\n        }\r\n        if (res.result.value) {\r\n            const { executable, owner, lamports, data } = account;\r\n            assert(data[1] === \"base64\");\r\n            value = {\r\n                executable,\r\n                owner: new PublicKey(owner),\r\n                lamports,\r\n                data: Buffer.from(data[0], \"base64\"),\r\n            };\r\n        }\r\n        if (value === null) {\r\n            throw new Error(\"Invalid response\");\r\n        }\r\n        accounts.push(value);\r\n    }\r\n    return accounts.map((account, idx) => {\r\n        if (account === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            publicKey: publicKeys[idx],\r\n            account,\r\n        };\r\n    });\r\n}\r\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}