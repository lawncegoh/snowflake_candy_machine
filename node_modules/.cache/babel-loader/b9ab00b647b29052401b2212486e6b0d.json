{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BloctoWalletAdapter = void 0;\n\nconst sdk_1 = __importDefault(require(\"@blocto/sdk\"));\n\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass BloctoWalletAdapter extends wallet_adapter_base_1.BaseWalletAdapter {\n  constructor(config = {}) {\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    this._network = config.network || wallet_adapter_base_1.WalletAdapterNetwork.Mainnet;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return true;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._publicKey;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = new sdk_1.default({\n          solana: {\n            net: this._network\n          }\n        }).solana;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotFoundError();\n\n        if (!wallet.connected) {\n          try {\n            yield wallet.connect();\n          } catch (error) {\n            throw new wallet_adapter_base_1.WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          }\n        }\n\n        const account = wallet.accounts[0];\n        if (!account) throw new wallet_adapter_base_1.WalletAccountError();\n        let publicKey;\n\n        try {\n          publicKey = new web3_js_1.PublicKey(account);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new wallet_adapter_base_1.WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n\n        this.emit('disconnect');\n      }\n    });\n  }\n\n  sendTransaction(transaction, connection, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          transaction.feePayer || (transaction.feePayer = this.publicKey || undefined);\n          transaction.recentBlockhash || (transaction.recentBlockhash = (yield connection.getRecentBlockhash('finalized')).blockhash);\n          const {\n            signers\n          } = options;\n\n          if (signers === null || signers === void 0 ? void 0 : signers.length) {\n            transaction = yield wallet.convertToProgramWalletTransaction(transaction);\n            transaction.partialSign(...signers);\n          }\n\n          return yield wallet.signAndSendTransaction(transaction, connection);\n        } catch (error) {\n          if (error instanceof wallet_adapter_base_1.WalletError) throw error;\n          throw new wallet_adapter_base_1.WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}\n\nexports.BloctoWalletAdapter = BloctoWalletAdapter;","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BloctoWalletAdapter = void 0;\r\nconst sdk_1 = __importDefault(require(\"@blocto/sdk\"));\r\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nclass BloctoWalletAdapter extends wallet_adapter_base_1.BaseWalletAdapter {\r\n    constructor(config = {}) {\r\n        super();\r\n        this._connecting = false;\r\n        this._wallet = null;\r\n        this._publicKey = null;\r\n        this._network = config.network || wallet_adapter_base_1.WalletAdapterNetwork.Mainnet;\r\n    }\r\n    get publicKey() {\r\n        return this._publicKey;\r\n    }\r\n    get ready() {\r\n        return true;\r\n    }\r\n    get connecting() {\r\n        return this._connecting;\r\n    }\r\n    get connected() {\r\n        return !!this._publicKey;\r\n    }\r\n    get autoApprove() {\r\n        return false;\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.connected || this.connecting)\r\n                    return;\r\n                this._connecting = true;\r\n                const wallet = new sdk_1.default({ solana: { net: this._network } }).solana;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotFoundError();\r\n                if (!wallet.connected) {\r\n                    try {\r\n                        yield wallet.connect();\r\n                    }\r\n                    catch (error) {\r\n                        throw new wallet_adapter_base_1.WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                    }\r\n                }\r\n                const account = wallet.accounts[0];\r\n                if (!account)\r\n                    throw new wallet_adapter_base_1.WalletAccountError();\r\n                let publicKey;\r\n                try {\r\n                    publicKey = new web3_js_1.PublicKey(account);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                this._wallet = wallet;\r\n                this._publicKey = publicKey;\r\n                this.emit('connect');\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n            finally {\r\n                this._connecting = false;\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const wallet = this._wallet;\r\n            if (wallet) {\r\n                this._wallet = null;\r\n                this._publicKey = null;\r\n                try {\r\n                    wallet.disconnect();\r\n                }\r\n                catch (error) {\r\n                    this.emit('error', new wallet_adapter_base_1.WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\r\n                }\r\n                this.emit('disconnect');\r\n            }\r\n        });\r\n    }\r\n    sendTransaction(transaction, connection, options = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    transaction.feePayer || (transaction.feePayer = this.publicKey || undefined);\r\n                    transaction.recentBlockhash || (transaction.recentBlockhash = (yield connection.getRecentBlockhash('finalized')).blockhash);\r\n                    const { signers } = options;\r\n                    if (signers === null || signers === void 0 ? void 0 : signers.length) {\r\n                        transaction = yield wallet.convertToProgramWalletTransaction(transaction);\r\n                        transaction.partialSign(...signers);\r\n                    }\r\n                    return yield wallet.signAndSendTransaction(transaction, connection);\r\n                }\r\n                catch (error) {\r\n                    if (error instanceof wallet_adapter_base_1.WalletError)\r\n                        throw error;\r\n                    throw new wallet_adapter_base_1.WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.BloctoWalletAdapter = BloctoWalletAdapter;\r\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"script"}