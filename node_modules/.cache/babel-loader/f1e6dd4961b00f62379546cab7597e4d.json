{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathWalletWalletAdapter = void 0;\n\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass MathWalletWalletAdapter extends wallet_adapter_base_1.BaseSignerWalletAdapter {\n  constructor(config = {}) {\n    super();\n\n    this._messaged = event => {\n      const data = event.data;\n\n      if (data && data.origin === 'mathwallet_internal' && data.type === 'lockStatusChanged' && !data.payload) {\n        this._disconnected();\n      }\n    };\n\n    this._disconnected = () => {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new wallet_adapter_base_1.WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) (0, wallet_adapter_base_1.pollUntilReady)(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._wallet;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && window.solana;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotFoundError();\n        if (!wallet.isMathWallet) throw new wallet_adapter_base_1.WalletNotInstalledError(); // @TODO: handle if popup is blocked\n\n        let account;\n\n        try {\n          account = yield wallet.getAccount();\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new web3_js_1.PublicKey(account);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        window.addEventListener('message', this._messaged);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('disconnect');\n      }\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          return yield wallet.signTransaction(transaction);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n        try {\n          return yield wallet.signAllTransactions(transactions);\n        } catch (error) {\n          throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}\n\nexports.MathWalletWalletAdapter = MathWalletWalletAdapter;","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MathWalletWalletAdapter = void 0;\r\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nclass MathWalletWalletAdapter extends wallet_adapter_base_1.BaseSignerWalletAdapter {\r\n    constructor(config = {}) {\r\n        super();\r\n        this._messaged = (event) => {\r\n            const data = event.data;\r\n            if (data && data.origin === 'mathwallet_internal' && data.type === 'lockStatusChanged' && !data.payload) {\r\n                this._disconnected();\r\n            }\r\n        };\r\n        this._disconnected = () => {\r\n            if (this._wallet) {\r\n                window.removeEventListener('message', this._messaged);\r\n                this._wallet = null;\r\n                this._publicKey = null;\r\n                this.emit('error', new wallet_adapter_base_1.WalletDisconnectedError());\r\n                this.emit('disconnect');\r\n            }\r\n        };\r\n        this._connecting = false;\r\n        this._wallet = null;\r\n        this._publicKey = null;\r\n        if (!this.ready)\r\n            (0, wallet_adapter_base_1.pollUntilReady)(this, config.pollInterval || 1000, config.pollCount || 3);\r\n    }\r\n    get publicKey() {\r\n        return this._publicKey;\r\n    }\r\n    get ready() {\r\n        var _a;\r\n        return typeof window !== 'undefined' && !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet);\r\n    }\r\n    get connecting() {\r\n        return this._connecting;\r\n    }\r\n    get connected() {\r\n        return !!this._wallet;\r\n    }\r\n    get autoApprove() {\r\n        return false;\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.connected || this.connecting)\r\n                    return;\r\n                this._connecting = true;\r\n                const wallet = typeof window !== 'undefined' && window.solana;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotFoundError();\r\n                if (!wallet.isMathWallet)\r\n                    throw new wallet_adapter_base_1.WalletNotInstalledError();\r\n                // @TODO: handle if popup is blocked\r\n                let account;\r\n                try {\r\n                    account = yield wallet.getAccount();\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                let publicKey;\r\n                try {\r\n                    publicKey = new web3_js_1.PublicKey(account);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                window.addEventListener('message', this._messaged);\r\n                this._wallet = wallet;\r\n                this._publicKey = publicKey;\r\n                this.emit('connect');\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n            finally {\r\n                this._connecting = false;\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._wallet) {\r\n                window.removeEventListener('message', this._messaged);\r\n                this._wallet = null;\r\n                this._publicKey = null;\r\n                this.emit('disconnect');\r\n            }\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    return yield wallet.signTransaction(transaction);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signAllTransactions(transactions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n                try {\r\n                    return yield wallet.signAllTransactions(transactions);\r\n                }\r\n                catch (error) {\r\n                    throw new wallet_adapter_base_1.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.MathWalletWalletAdapter = MathWalletWalletAdapter;\r\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"script"}